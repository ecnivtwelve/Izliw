{"version":3,"sources":["../src/utils/IzlyAmount.ts","../src/utils/IzlyDate.ts","../src/utils/IzlyHTML.ts","../src/services/Balance.ts","../src/services/Deposits.ts","../src/services/Notifications.ts","../src/services/Profile.ts","../src/account/QRCodes.ts","../src/api/Authentification.ts","../src/index.ts"],"names":[],"mappings":"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","file":"index.mjs","sourcesContent":["export function extractAmount(amount: string): number {\n  return parseFloat(amount.replace(',', '.').replace('€', '').trim());\n}","export function extractDate(dateString: string, split: string = ' à '): Date {\n  const [datePart, timePart] = dateString.split(split);\n  const [day, month, year] = datePart.split('/');\n  const [hour, minute] = timePart.split(':');\n\n  const date = new Date(parseInt(year), parseInt(month) - 1, parseInt(day), parseInt(hour), parseInt(minute));\n\n  return date;\n}","export function extractTextBetweenTags(html: string, tag: string): string {\n  const regex = new RegExp(`<${tag}[^>]*>(.*?)<\\/${tag}>`, 's');\n  const match = html.match(regex);\n  return match ? match[1].trim() : '';\n}\n\nexport function extractTextByClass(html: string, className: string, index: number = 0): string {\n  const regex = new RegExp(`<[^>]*class=[^>]*${className}[^>]*>(.*?)<\\/`, 'g');\n  const matches = [...html.matchAll(regex)];\n  return matches[index] ? matches[index][1].trim() : '';\n}\n\nexport function extractTextById(html: string, id: string): string {\n  const regex = new RegExp(`<[^>]*id=\"${id}\"[^>]*>(.*?)<\\/`, 's');\n  const match = html.match(regex);\n  return match ? match[1].trim() : '';\n}\n\nexport function extractAllListItems(html: string): string[] {\n  const regex = /<li class=\"list-group-item\"[^>]*>[\\s\\S]*?<\\/li>/g;\n  return html.match(regex) || [];\n}\n\nexport function extractTableRows(html: string): string[] {\n  const regex = /<tr>[\\s\\S]*?<\\/tr>/g;\n  return html.match(regex) || [];\n}\n\nexport function extractTableColumns(row: string): string[] {\n  const regex = /<td[^>]*>([\\s\\S]*?)<\\/td>/g;\n  const matches = [...row.matchAll(regex)];\n  return matches.map(match => match[1].replace(/<[^>]*>/g, '').trim());\n}\n\nexport function extractAttributeValue(html: string, attribute: string): string {\n  const regex = new RegExp(`${attribute}=\"([^\"]*)\"`, 'i');\n  const match = html.match(regex);\n  return match ? match[1] : '';\n}\n\nexport function stripHtmlTags(html: string): string {\n  return html.replace(/<[^>]*>/g, '').trim();\n}\n\nexport function extractRequestVerificationToken(html: string): string {\n  const regex = /<input[^>]*name=[\"']__RequestVerificationToken[\"'][^>]*value=[\"']([^\"']+)[\"'][^>]*>/i;\n  const match = html.match(regex);\n  return match ? match[1] : '';\n}","import { AxiosInstance } from 'axios';\nimport { Balance } from '~/types/Balance';\nimport { extractAmount } from '~/utils/IzlyAmount';\nimport { extractDate } from '~/utils/IzlyDate';\nimport { extractTextById, extractTextByClass } from '~/utils/IzlyHTML';\n\nexport async function ServiceBalance(axiosInstance: AxiosInstance): Promise<Balance> {\n  const response = await axiosInstance.get('https://mon-espace.izly.fr/', {\n    headers: {\n      'Referer': 'https://mon-espace.izly.fr/Home/Logon',\n    }\n  });\n\n  const htmlContent = response.data;\n\n  const balanceText = extractTextById(htmlContent, 'balance');\n  const balance = extractAmount(balanceText);\n\n  const balanceDate = extractTextByClass(htmlContent, 'balance-heading-date');\n  const date = extractDate(balanceDate, ' à ');\n\n  if (isNaN(balance)) {\n    throw new Error('Failed to extract balance. Possible page structure change.');\n  }\n\n  return {\n    date: date,\n    amount: balance,\n  };\n}","import { AxiosInstance } from 'axios';\nimport { Deposit } from '../types/Deposit';\nimport { extractDate } from '~/utils/IzlyDate';\nimport { extractAmount } from '~/utils/IzlyAmount';\nimport { extractAllListItems, extractTextByClass, stripHtmlTags } from '~/utils/IzlyHTML';\n\nexport async function ServiceDeposits(axiosInstance: AxiosInstance): Promise<Deposit[]> {\n  const response = await axiosInstance.get('https://mon-espace.izly.fr/Home/GetTopups', {\n    headers: {\n      'Referer': 'https://mon-espace.izly.fr/',\n      'X-Requested-With': 'XMLHttpRequest',\n    }\n  });\n\n  const htmlContent = response.data;\n  const deposits: Deposit[] = [];\n\n  const listItems = extractAllListItems(htmlContent);\n\n  listItems.forEach(item => {\n    const typeInfo = extractTextByClass(item, 'operation-type');\n    const [type, method] = typeInfo.split(' - ').map(s => s.trim());\n\n    const dateText = extractTextByClass(item, 'oeration-date');\n    const date = extractDate(dateText, ' ');\n\n    const amountText = extractTextByClass(item, 'operation-amount');\n    const amount = extractAmount(amountText);\n\n    const status = extractTextByClass(item, 'badge');\n\n    deposits.push({ type, method, date, amount, status });\n  });\n\n  return deposits;\n}","import { AxiosInstance } from 'axios';\nimport { Notification } from '../types/Notification';\nimport { extractDate } from '~/utils/IzlyDate';\nimport { extractTableRows, extractTableColumns } from '~/utils/IzlyHTML';\n\nexport async function ServiceNotifications(axiosInstance: AxiosInstance): Promise<Notification[]> {\n  try {\n    const response = await axiosInstance.get('https://mon-espace.izly.fr/Profile?page=1', {\n      headers: {\n        'Accept': 'text/html, */*; q=0.01',\n        'X-Requested-With': 'XMLHttpRequest',\n        'Referer': 'https://mon-espace.izly.fr/Profile',\n      },\n    });\n\n    if (response.status === 200) {\n      const htmlContent = response.data;\n      const notifications: Notification[] = [];\n\n      const rows = extractTableRows(htmlContent);\n\n      rows.forEach(row => {\n        const columns = extractTableColumns(row);\n        if (columns.length >= 3) {\n          const date = extractDate(columns[1], ' à ');\n          const description = columns[2];\n          notifications.push({ date, description });\n        }\n      });\n\n      return notifications;\n    } else {\n      throw new Error('Failed to retrieve notifications');\n    }\n  } catch (error) {\n    console.error('Error retrieving notifications:', (error as Error).message);\n    throw error;\n  }\n}","import { AxiosInstance } from 'axios';\nimport { Profile } from '../types/Profile';\nimport { extractTextBetweenTags, extractTextByClass, extractTextById } from '~/utils/IzlyHTML';\n\nexport async function ServiceProfile(axiosInstance: AxiosInstance): Promise<Profile> {\n  try {\n    const response = await axiosInstance.get('https://mon-espace.izly.fr/Profile', {\n      headers: {\n        'Referer': 'https://mon-espace.izly.fr/',\n      },\n    });\n\n    if (response.status === 200) {\n      const htmlContent = response.data;\n\n      const profile: Profile = {\n        name: extractTextBetweenTags(htmlContent, 'h1'),\n        identifier: extractTextByClass(htmlContent, 'heading-label-value', 0),\n        pseudo: extractTextByClass(htmlContent, 'heading-label-value', 1),\n        birthDate: extractTextByClass(htmlContent, 'heading-label-value', 2),\n        address: `${extractTextByClass(htmlContent, 'addWay')}, ${extractTextByClass(htmlContent, 'addZipCode')} ${extractTextByClass(htmlContent, 'addCity')}`,\n        primaryEmail: extractTextByClass(htmlContent, 'rectangle', 1),\n        secondaryEmail: extractTextById(htmlContent, 'emailPersonnel'),\n        phoneNumber: extractTextById(htmlContent, 'currentPhoneNumber'),\n        companyCode: extractTextByClass(htmlContent, 'rectangle', 4),\n        tariffCode: extractTextByClass(htmlContent, 'rectangle', 5),\n        crousRightsEndDate: extractTextByClass(htmlContent, 'rectangle', 6)\n      };\n\n      return profile;\n    } else {\n      throw new Error('Failed to retrieve profile information');\n    }\n  } catch (error) {\n    console.error('Error retrieving profile information:', (error as Error).message);\n    throw error;\n  }\n}","import { AxiosInstance } from 'axios';\n\nexport async function RequestQRCode(axiosInstance: AxiosInstance, numberOfQRCodes: number = 1): Promise < string[] > {\n  try {\n    const response = await axiosInstance.post('https://mon-espace.izly.fr/Home/CreateQrCodeImg',\n      `numberOfQrCodes=${numberOfQRCodes}`,\n      {\n        headers: {\n          'Accept': 'text/html, */*; q=0.01',\n          'X-Requested-With': 'XMLHttpRequest',\n          'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n          'Origin': 'https://mon-espace.izly.fr',\n          'Referer': 'https://mon-espace.izly.fr/Home/GenerateQRCode',\n        }\n      }\n    );\n\n    if (response.status === 200) {\n      return response.data as string[];  // This should be an array of base64-encoded QR code images\n    } else {\n      throw new Error('Failed to generate QR Code(s)');\n    }\n  } catch (error) {\n    console.error('Error generating QR Code(s):', (error as Error).message);\n    throw error;\n  }\n}","import axios, { AxiosInstance, AxiosResponse, AxiosRequestConfig } from 'axios';\nimport { extractRequestVerificationToken } from '~/utils/IzlyHTML';\n\nclass LoginService {\n  private axiosInstance: AxiosInstance;\n  private cookies: string[];\n\n  constructor() {\n    this.axiosInstance = axios.create({\n      withCredentials: true,\n      maxRedirects: 0,\n      validateStatus: () => true,\n      headers: {\n        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36',\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',\n        'Accept-Language': 'fr-FR,fr;q=0.9,en-GB;q=0.8,en;q=0.7,en-US;q=0.6,es;q=0.5',\n      },\n    });\n    this.cookies = [];\n  }\n\n  private updateCookies(headers: Record<string, string | string[]>): void {\n    if (headers['set-cookie']) {\n      const newCookies = Array.isArray(headers['set-cookie']) ? headers['set-cookie'] : [headers['set-cookie']];\n      this.cookies = [...this.cookies, ...newCookies];\n      this.axiosInstance.defaults.headers.Cookie = this.cookies.join('; ');\n    }\n  }\n\n  private async makeRequest(method: string, url: string, data: string | null = null, additionalHeaders: Record<string, string> = {}): Promise<AxiosResponse> {\n    const config: AxiosRequestConfig = {\n      method,\n      url,\n      headers: {\n        ...this.axiosInstance.defaults.headers,\n        ...additionalHeaders,\n      },\n      data,\n    };\n\n    if (this.cookies.length > 0) {\n      config.headers = config.headers || {};\n      config.headers.Cookie = this.cookies.join('; ');\n    }\n\n    const response = await this.axiosInstance(config);\n    this.updateCookies(response.headers);\n    return response;\n  }\n\n  async login(username: string, password: string): Promise<boolean> {\n    try {\n      // Step 1: Initial GET request to /Home/Logon\n      let response = await this.makeRequest('GET', 'https://mon-espace.izly.fr/Home/Logon', null, {\n        'Referer': 'https://mon-espace.izly.fr/',\n      });\n\n      const requestVerificationToken = extractRequestVerificationToken(response.data);\n\n      if (!requestVerificationToken) {\n        throw new Error('Failed to extract request verification token');\n      }\n\n      // Step 2: POST login request\n      response = await this.makeRequest('POST', 'https://mon-espace.izly.fr/Home/Logon',\n        `__RequestVerificationToken=${encodeURIComponent(requestVerificationToken)}&ReturnUrl=&Username=${encodeURIComponent(username)}&Password=${encodeURIComponent(password)}`,\n        {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Origin': 'https://mon-espace.izly.fr',\n          'Referer': 'https://mon-espace.izly.fr/Home/Logon',\n        }\n      );\n\n      // Check for redirect and follow it\n      if (response.status === 302) {\n        const redirectUrl = response.headers.location as string;\n        response = await this.makeRequest('GET', `https://mon-espace.izly.fr${redirectUrl}`, null, {\n          'Referer': 'https://mon-espace.izly.fr/Home/Logon',\n        });\n      }\n\n      // Step 3: Check if we are logged in\n      response = await this.makeRequest('GET', 'https://mon-espace.izly.fr/', null, {\n        'Referer': 'https://mon-espace.izly.fr/Home/Logon',\n      });\n\n      if (response.status !== 200) {\n        throw new Error('Failed to login');\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Login error:', (error as Error).message);\n      return false;\n    }\n  }\n\n  getAxiosInstance(): AxiosInstance {\n    return this.axiosInstance;\n  }\n}\n\nexport default LoginService;","import { AxiosInstance } from 'axios';\n\nimport type { Deposit } from './types/Deposit';\nimport type { Notification } from './types/Notification';\nimport type { Profile } from './types/Profile';\n\nimport { ServiceBalance } from './services/Balance';\nimport { ServiceDeposits } from './services/Deposits';\nimport { ServiceNotifications } from './services/Notifications';\nimport { ServiceProfile } from './services/Profile';\n\nimport { RequestQRCode } from './account/QRCodes';\nimport LoginService from './api/Authentification';\nimport { Balance } from './types/Balance';\nclass Izly {\n  private loginService: LoginService;\n  private axiosInstance: AxiosInstance;\n  private loggedIn: boolean = false;\n\n  constructor() {\n    this.loginService = new LoginService();\n    this.axiosInstance = this.loginService.getAxiosInstance();\n  }\n\n  async login(username: string, password: string): Promise<boolean> {\n    try {\n      this.loggedIn = await this.loginService.login(username, password);\n      return this.loggedIn;\n    } catch (error) {\n      console.error('Login error:', (error as Error).message);\n      return false;\n    }\n  }\n\n  private checkLogin() {\n    if (!this.loggedIn) {\n      throw new Error('Not logged in. Please login first.');\n    }\n  }\n\n  async getProfile(): Promise<Profile> {\n    this.checkLogin();\n    return ServiceProfile(this.axiosInstance);\n  }\n\n  async getNotifications(): Promise<Notification[]> {\n    this.checkLogin();\n    return ServiceNotifications(this.axiosInstance);\n  }\n\n  async getBalance(): Promise<Balance> {\n    this.checkLogin();\n    return ServiceBalance(this.axiosInstance);\n  }\n\n  async getDeposits(): Promise<Deposit[]> {\n    this.checkLogin();\n    return ServiceDeposits(this.axiosInstance);\n  }\n\n  async generateQRCode(): Promise<string[]> {\n    this.checkLogin();\n    return RequestQRCode(this.axiosInstance);\n  }\n}\n\nexport default Izly;"]}